/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.test.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
/** A weather reading. */
@org.apache.avro.specific.AvroGenerated
public class weatherRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6216501875179234068L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"weatherRecord\",\"namespace\":\"com.test.avro\",\"doc\":\"A weather reading.\",\"fields\":[{\"name\":\"year\",\"type\":\"int\"},{\"name\":\"temperature\",\"type\":\"int\"},{\"name\":\"stationId\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<weatherRecord> ENCODER =
      new BinaryMessageEncoder<weatherRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<weatherRecord> DECODER =
      new BinaryMessageDecoder<weatherRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<weatherRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<weatherRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<weatherRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this weatherRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a weatherRecord from a ByteBuffer. */
  public static weatherRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int year;
  @Deprecated public int temperature;
  @Deprecated public java.lang.CharSequence stationId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public weatherRecord() {}

  /**
   * All-args constructor.
   * @param year The new value for year
   * @param temperature The new value for temperature
   * @param stationId The new value for stationId
   */
  public weatherRecord(java.lang.Integer year, java.lang.Integer temperature, java.lang.CharSequence stationId) {
    this.year = year;
    this.temperature = temperature;
    this.stationId = stationId;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return year;
    case 1: return temperature;
    case 2: return stationId;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: year = (java.lang.Integer)value$; break;
    case 1: temperature = (java.lang.Integer)value$; break;
    case 2: stationId = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'year' field.
   * @return The value of the 'year' field.
   */
  public java.lang.Integer getYear() {
    return year;
  }

  /**
   * Sets the value of the 'year' field.
   * @param value the value to set.
   */
  public void setYear(java.lang.Integer value) {
    this.year = value;
  }

  /**
   * Gets the value of the 'temperature' field.
   * @return The value of the 'temperature' field.
   */
  public java.lang.Integer getTemperature() {
    return temperature;
  }

  /**
   * Sets the value of the 'temperature' field.
   * @param value the value to set.
   */
  public void setTemperature(java.lang.Integer value) {
    this.temperature = value;
  }

  /**
   * Gets the value of the 'stationId' field.
   * @return The value of the 'stationId' field.
   */
  public java.lang.CharSequence getStationId() {
    return stationId;
  }

  /**
   * Sets the value of the 'stationId' field.
   * @param value the value to set.
   */
  public void setStationId(java.lang.CharSequence value) {
    this.stationId = value;
  }

  /**
   * Creates a new weatherRecord RecordBuilder.
   * @return A new weatherRecord RecordBuilder
   */
  public static com.test.avro.weatherRecord.Builder newBuilder() {
    return new com.test.avro.weatherRecord.Builder();
  }

  /**
   * Creates a new weatherRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new weatherRecord RecordBuilder
   */
  public static com.test.avro.weatherRecord.Builder newBuilder(com.test.avro.weatherRecord.Builder other) {
    return new com.test.avro.weatherRecord.Builder(other);
  }

  /**
   * Creates a new weatherRecord RecordBuilder by copying an existing weatherRecord instance.
   * @param other The existing instance to copy.
   * @return A new weatherRecord RecordBuilder
   */
  public static com.test.avro.weatherRecord.Builder newBuilder(com.test.avro.weatherRecord other) {
    return new com.test.avro.weatherRecord.Builder(other);
  }

  /**
   * RecordBuilder for weatherRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<weatherRecord>
    implements org.apache.avro.data.RecordBuilder<weatherRecord> {

    private int year;
    private int temperature;
    private java.lang.CharSequence stationId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.test.avro.weatherRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.year)) {
        this.year = data().deepCopy(fields()[0].schema(), other.year);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.temperature)) {
        this.temperature = data().deepCopy(fields()[1].schema(), other.temperature);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.stationId)) {
        this.stationId = data().deepCopy(fields()[2].schema(), other.stationId);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing weatherRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.test.avro.weatherRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.year)) {
        this.year = data().deepCopy(fields()[0].schema(), other.year);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.temperature)) {
        this.temperature = data().deepCopy(fields()[1].schema(), other.temperature);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.stationId)) {
        this.stationId = data().deepCopy(fields()[2].schema(), other.stationId);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'year' field.
      * @return The value.
      */
    public java.lang.Integer getYear() {
      return year;
    }

    /**
      * Sets the value of the 'year' field.
      * @param value The value of 'year'.
      * @return This builder.
      */
    public com.test.avro.weatherRecord.Builder setYear(int value) {
      validate(fields()[0], value);
      this.year = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'year' field has been set.
      * @return True if the 'year' field has been set, false otherwise.
      */
    public boolean hasYear() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'year' field.
      * @return This builder.
      */
    public com.test.avro.weatherRecord.Builder clearYear() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'temperature' field.
      * @return The value.
      */
    public java.lang.Integer getTemperature() {
      return temperature;
    }

    /**
      * Sets the value of the 'temperature' field.
      * @param value The value of 'temperature'.
      * @return This builder.
      */
    public com.test.avro.weatherRecord.Builder setTemperature(int value) {
      validate(fields()[1], value);
      this.temperature = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'temperature' field has been set.
      * @return True if the 'temperature' field has been set, false otherwise.
      */
    public boolean hasTemperature() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'temperature' field.
      * @return This builder.
      */
    public com.test.avro.weatherRecord.Builder clearTemperature() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'stationId' field.
      * @return The value.
      */
    public java.lang.CharSequence getStationId() {
      return stationId;
    }

    /**
      * Sets the value of the 'stationId' field.
      * @param value The value of 'stationId'.
      * @return This builder.
      */
    public com.test.avro.weatherRecord.Builder setStationId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.stationId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'stationId' field has been set.
      * @return True if the 'stationId' field has been set, false otherwise.
      */
    public boolean hasStationId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'stationId' field.
      * @return This builder.
      */
    public com.test.avro.weatherRecord.Builder clearStationId() {
      stationId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public weatherRecord build() {
      try {
        weatherRecord record = new weatherRecord();
        record.year = fieldSetFlags()[0] ? this.year : (java.lang.Integer) defaultValue(fields()[0]);
        record.temperature = fieldSetFlags()[1] ? this.temperature : (java.lang.Integer) defaultValue(fields()[1]);
        record.stationId = fieldSetFlags()[2] ? this.stationId : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<weatherRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<weatherRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<weatherRecord>
    READER$ = (org.apache.avro.io.DatumReader<weatherRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
